name: 'Deploy'

on:
  workflow_call:
    inputs:
      ENVIRONMENT:
        required: true
        type: string

jobs:
  terraform-deploy:
    name: 'Terraform Deployment'
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: develop

    steps:
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ vars.TERRAFORM_VERSION }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      env:
        BACKEND_RESOURCE_GROUP_NAME: ${{ vars.BACKEND_RESOURCE_GROUP_NAME }}
        BACKEND_STORAGE_ACCOUNT_NAME: ${{ vars.BACKEND_STORAGE_ACCOUNT_NAME }}
        BACKEND_CONTAINER_NAME: ${{ vars.BACKEND_CONTAINER_NAME }}
        BACKEND_KEY: ${{ vars.BACKEND_KEY }}
        RESOURCE_GROUP_NAME: ${{ vars.RESOURCE_GROUP_NAME }}
        LOCATION: ${{ vars.LOCATION }}
        TENANT_ID: ${{ secrets.TENANT_ID }}
        BACKEND_PRINCIPAL_ID: ${{ secrets.BACKEND_PRINCIPAL_ID }}
        BASE_PRINCIPAL_ID: ${{ secrets.BASE_PRINCIPAL_ID }}
        PRODUCT_PRINCIPAL_ID: ${{ secrets.PRODUCT_PRINCIPAL_ID }}
        CONTAINER_PRINCIPAL_ID: ${{ secrets.CONTAINER_PRINCIPAL_ID }}
      run: |
        terraform -chdir=terraform/env/${{ inputs.ENVIRONMENT }} \
        init \
        -backend-config="resource_group_name=$BACKEND_RESOURCE_GROUP_NAME" \
        -backend-config="storage_account_name=$BACKEND_STORAGE_ACCOUNT_NAME" \
        -backend-config="container_name=$BACKEND_CONTAINER_NAME" \
        -backend-config="key=$BACKEND_KEY" \
        -var resource_group_name=$RESOURCE_GROUP_NAME \
        -var location=$LOCATION \
        -var tenant_id=$TENANT_ID \
        -var backend_principal_id=$BACKEND_PRINCIPAL_ID \
        -var base_principal_id=$BASE_PRINCIPAL_ID \
        -var product_principal_id=$PRODUCT_PRINCIPAL_ID \
        -var container_principal_id=$CONTAINER_PRINCIPAL_ID

    # Checks that all Terraform configuration files adhere to a canonical format
    # Will fail the build if not
    - name: Terraform Validate
      run: terraform validate -no-color

    #Terraform Plan
    - name: Terraform Plan
      env:
        BACKEND_RESOURCE_GROUP_NAME: ${{ vars.BACKEND_RESOURCE_GROUP_NAME }}
        BACKEND_STORAGE_ACCOUNT_NAME: ${{ vars.BACKEND_STORAGE_ACCOUNT_NAME }}
        BACKEND_CONTAINER_NAME: ${{ vars.BACKEND_CONTAINER_NAME }}
        BACKEND_KEY: ${{ vars.BACKEND_KEY }}
        RESOURCE_GROUP_NAME: ${{ vars.RESOURCE_GROUP_NAME }}
        LOCATION: ${{ vars.LOCATION }}
        TENANT_ID: ${{ secrets.TENANT_ID }}
        BACKEND_PRINCIPAL_ID: ${{ secrets.BACKEND_PRINCIPAL_ID }}
        BASE_PRINCIPAL_ID: ${{ secrets.BASE_PRINCIPAL_ID }}
        PRODUCT_PRINCIPAL_ID: ${{ secrets.PRODUCT_PRINCIPAL_ID }}
        CONTAINER_PRINCIPAL_ID: ${{ secrets.CONTAINER_PRINCIPAL_ID }}
      run: |
        terraform -chdir=terraform/env/${{ inputs.ENVIRONMENT }} \
        plan -no-color \
        -var backend_resource_group_name=$BACKEND_RESOURCE_GROUP_NAME \
        -var backend_storage_account_name=$BACKEND_STORAGE_ACCOUNT_NAME \
        -var backend_container_name=$BACKEND_CONTAINER_NAME \
        -var backend_key=$BACKEND_KEY \
        -var resource_group_name=$RESOURCE_GROUP_NAME \
        -var location=$LOCATION \
        -var tenant_id=$TENANT_ID \
        -var backend_principal_id=$BACKEND_PRINCIPAL_ID \
        -var base_principal_id=$BASE_PRINCIPAL_ID \
        -var product_principal_id=$PRODUCT_PRINCIPAL_ID \
        -var container_principal_id=$CONTAINER_PRINCIPAL_ID

    # Terraform Apply
    - name: Terraform Apply
      env:
        BACKEND_RESOURCE_GROUP_NAME: ${{ vars.BACKEND_RESOURCE_GROUP_NAME }}
        BACKEND_STORAGE_ACCOUNT_NAME: ${{ vars.BACKEND_STORAGE_ACCOUNT_NAME }}
        BACKEND_CONTAINER_NAME: ${{ vars.BACKEND_CONTAINER_NAME }}
        BACKEND_KEY: ${{ vars.BACKEND_KEY }}
        RESOURCE_GROUP_NAME: ${{ vars.RESOURCE_GROUP_NAME }}
        LOCATION: ${{ vars.LOCATION }}
        TENANT_ID: ${{ secrets.TENANT_ID }}
        BACKEND_PRINCIPAL_ID: ${{ secrets.BACKEND_PRINCIPAL_ID }}
        BASE_PRINCIPAL_ID: ${{ secrets.BASE_PRINCIPAL_ID }}
        PRODUCT_PRINCIPAL_ID: ${{ secrets.PRODUCT_PRINCIPAL_ID }}
        CONTAINER_PRINCIPAL_ID: ${{ secrets.CONTAINER_PRINCIPAL_ID }}
      run: |
        terraform -chdir=terraform/env/${{ inputs.ENVIRONMENT }} \
        apply -auto-approve \
        -var backend_resource_group_name=$BACKEND_RESOURCE_GROUP_NAME \
        -var backend_storage_account_name=$BACKEND_STORAGE_ACCOUNT_NAME \
        -var backend_container_name=$BACKEND_CONTAINER_NAME \
        -var backend_key=$BACKEND_KEY \
        -var resource_group_name=$RESOURCE_GROUP_NAME \
        -var location=$LOCATION \
        -var tenant_id=$TENANT_ID \
        -var backend_principal_id=$BACKEND_PRINCIPAL_ID \
        -var base_principal_id=$BASE_PRINCIPAL_ID \
        -var product_principal_id=$PRODUCT_PRINCIPAL_ID \
        -var container_principal_id=$CONTAINER_PRINCIPAL_ID