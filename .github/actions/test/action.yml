name: 'Test'
description: 'Test Terraform configuration to Azure'

inputs:
  ENVIRONMENT:
    description: 'The environment to deploy to'
    required: true

  TERRAFORM_VERSION:
    description: 'The version of Terraform to use'
    required: true

  K8S_VERSION:
    description: 'The version of Kubernetes to use'
    required: false

  CLIENT_ID:
    description: 'The client ID of the service principal used to access the backend storage account'
    required: true

  BACKEND_RESOURCE_GROUP_NAME:
    description: 'The name of the resource group to store the Terraform state file'
    required: true

  BACKEND_STORAGE_ACCOUNT_NAME:
    description: 'The name of the storage account to store the Terraform state file'
    required: true

  BACKEND_CONTAINER_NAME:
    description: 'The name of the container to store the Terraform state file'
    required: true

  BACKEND_KEY:
    description: 'The name of the key to store the Terraform state file'
    required: true

  RESOURCE_GROUP_NAME:
    description: 'The name of the resource group to deploy resources to'
    required: true

  LOCATION:
    description: 'The location to deploy resources to'
    required: true

  TENANT_ID:
    description: 'The Azure AD tenant ID'
    required: true

  SUBSCRIPTION_ID:
    description: 'The Azure subscription ID'
    required: true

  BACKEND_PRINCIPAL_ID:
    description: 'The principal ID of the service principal used to access the backend storage account'
    required: true

  BASE_PRINCIPAL_ID:
    description: 'The principal ID of the service principal used to access the base resource group'
    required: true

  PRODUCT_PRINCIPAL_ID:
    description: 'The principal ID of the service principal used to access the product resource group'
    required: true

  CONTAINER_PRINCIPAL_ID:
    description: 'The principal ID of the service principal used to access the container resource group'
    required: true

  STORAGE_ACCOUNT_NAME:
    description: 'The name of the storage account to store CSV file'
    required: true

  CONTAINER_NAME:
    description: 'The name of the container to store CSV file'
    required: true

  CSV_FILE_NAME:
    description: 'The name of the CSV file to download'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Azure Login
      uses: azure/login@v2
      with:
        client-id: ${{ inputs.CLIENT_ID }}
        tenant-id: ${{ inputs.TENANT_ID }}
        subscription-id: ${{ inputs.SUBSCRIPTION_ID }}

    - name: List Secret
      id: list-secret
      uses: azure/cli@v2
      with:
        azcliversion: latest
        inlineScript: |
          secret_name=()
          secret_value=()

          # download csv file from azure storage(BOM is not supported)
          az storage blob download --container-name ${{ inputs.CONTAINER_NAME }} --account-name ${{ inputs.STORAGE_ACCOUNT_NAME }} --name ${{ inputs.CSV_FILE_NAME }} -f ./${{ inputs.CSV_FILE_NAME }}

          {
            read # skip the first line
            while IFS=, read -r col1 col2; do
              secret_name+=("$col1")
              secret_value+=("$col2")
            done
          } < TestCsv.csv

          for i in "${!secret_name[@]}"; do
            echo "secret_name: ${secret_name[$i]}, secret_value: ${secret_value[$i]}"
          done

          secret_name_list=$(IFS=,; echo "${secret_name[*]}")
          secret_value_list=$(IFS=,; echo "${secret_value[*]}")

          echo "SECRET_NAME_LIST=$secret_name_list" >> "$GITHUB_OUTPUT"
          echo "SECRET_VALUE_LIST=$secret_value_list" >> "$GITHUB_OUTPUT"

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ inputs.TERRAFORM_VERSION }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      shell: bash
      env:
        BACKEND_RESOURCE_GROUP_NAME: ${{ inputs.BACKEND_RESOURCE_GROUP_NAME }}
        BACKEND_STORAGE_ACCOUNT_NAME: ${{ inputs.BACKEND_STORAGE_ACCOUNT_NAME }}
        BACKEND_CONTAINER_NAME: ${{ inputs.BACKEND_CONTAINER_NAME }}
        BACKEND_KEY: ${{ inputs.BACKEND_KEY }}
        TERRAFORM_VERSION: ${{ inputs.TERRAFORM_VERSION }}
        K8S_VERSION: ${{ inputs.K8S_VERSION }}
        RESOURCE_GROUP_NAME: ${{ inputs.RESOURCE_GROUP_NAME }}
        LOCATION: ${{ inputs.LOCATION }}
        TENANT_ID: ${{ inputs.TENANT_ID }}
        BACKEND_PRINCIPAL_ID: ${{ inputs.BACKEND_PRINCIPAL_ID }}
        BASE_PRINCIPAL_ID: ${{ inputs.BASE_PRINCIPAL_ID }}
        PRODUCT_PRINCIPAL_ID: ${{ inputs.PRODUCT_PRINCIPAL_ID }}
        CONTAINER_PRINCIPAL_ID: ${{ inputs.CONTAINER_PRINCIPAL_ID }}
        SECRET_NAME_LIST: ${{ steps.list-secret.outputs.SECRET_NAME_LIST }}
        SECRET_VALUE_LIST: ${{ steps.list-secret.outputs.SECRET_VALUE_LIST }}
      run: |
        terraform -chdir=terraform/env/${{ inputs.ENVIRONMENT }} init \
        -backend-config="resource_group_name=$BACKEND_RESOURCE_GROUP_NAME" \
        -backend-config="storage_account_name=$BACKEND_STORAGE_ACCOUNT_NAME" \
        -backend-config="container_name=$BACKEND_CONTAINER_NAME" \
        -backend-config="key=$BACKEND_KEY" \
        -var terraform_version=$TERRAFORM_VERSION \
        -var k8s_version=$K8S_VERSION \
        -var resource_group_name=$RESOURCE_GROUP_NAME \
        -var location=$LOCATION \
        -var tenant_id=$TENANT_ID \
        -var backend_principal_id=$BACKEND_PRINCIPAL_ID \
        -var base_principal_id=$BASE_PRINCIPAL_ID \
        -var product_principal_id=$PRODUCT_PRINCIPAL_ID \
        -var container_principal_id=$CONTAINER_PRINCIPAL_ID \
        -var secret_name_list=$SECRET_NAME_LIST \
        -var secret_value_list=$SECRET_VALUE_LIST

    # Checks that all Terraform configuration files adhere to a canonical format
    # Will fail the build if not
    - name: Terraform Validate
      shell: bash
      run: terraform -chdir=terraform/env/${{ inputs.ENVIRONMENT }} validate -no-color

    #Terraform Plan
    - name: Terraform Plan
      shell: bash
      env:
        BACKEND_RESOURCE_GROUP_NAME: ${{ inputs.BACKEND_RESOURCE_GROUP_NAME }}
        BACKEND_STORAGE_ACCOUNT_NAME: ${{ inputs.BACKEND_STORAGE_ACCOUNT_NAME }}
        BACKEND_CONTAINER_NAME: ${{ inputs.BACKEND_CONTAINER_NAME }}
        BACKEND_KEY: ${{ inputs.BACKEND_KEY }}
        TERRAFORM_VERSION: ${{ inputs.TERRAFORM_VERSION }}
        K8S_VERSION: ${{ inputs.K8S_VERSION }}
        RESOURCE_GROUP_NAME: ${{ inputs.RESOURCE_GROUP_NAME }}
        LOCATION: ${{ inputs.LOCATION }}
        TENANT_ID: ${{ inputs.TENANT_ID }}
        BACKEND_PRINCIPAL_ID: ${{ inputs.BACKEND_PRINCIPAL_ID }}
        BASE_PRINCIPAL_ID: ${{ inputs.BASE_PRINCIPAL_ID }}
        PRODUCT_PRINCIPAL_ID: ${{ inputs.PRODUCT_PRINCIPAL_ID }}
        CONTAINER_PRINCIPAL_ID: ${{ inputs.CONTAINER_PRINCIPAL_ID }}
        SECRET_NAME_LIST: ${{ steps.list-secret.outputs.SECRET_NAME_LIST }}
        SECRET_VALUE_LIST: ${{ steps.list-secret.outputs.SECRET_VALUE_LIST }}
      run: |
        terraform -chdir=terraform/env/${{ inputs.ENVIRONMENT }} plan \
        -no-color \
        -var backend_resource_group_name=$BACKEND_RESOURCE_GROUP_NAME \
        -var backend_storage_account_name=$BACKEND_STORAGE_ACCOUNT_NAME \
        -var backend_container_name=$BACKEND_CONTAINER_NAME \
        -var backend_key=$BACKEND_KEY \
        -var terraform_version=$TERRAFORM_VERSION \
        -var k8s_version=$K8S_VERSION \
        -var resource_group_name=$RESOURCE_GROUP_NAME \
        -var location=$LOCATION \
        -var tenant_id=$TENANT_ID \
        -var backend_principal_id=$BACKEND_PRINCIPAL_ID \
        -var base_principal_id=$BASE_PRINCIPAL_ID \
        -var product_principal_id=$PRODUCT_PRINCIPAL_ID \
        -var container_principal_id=$CONTAINER_PRINCIPAL_ID \
        -var secret_name_list=$SECRET_NAME_LIST \
        -var secret_value_list=$SECRET_VALUE_LIST